package org.assistments.direct.teacher;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base32;
import org.assistments.connector.controller.ShareLinkController;
import org.assistments.connector.domain.ShareLink;
import org.assistments.connector.utility.Constants;
import org.assistments.dao.controller.ExternalShareLinkDAO;
import org.assistments.dao.domain.ExternalShareLink;
import org.assistments.direct.LiteUtility;

@WebServlet({ "/Teacher", "/teacher" })
public class Teacher extends HttpServlet {
	private static final long serialVersionUID = -8603316572284984324L;

	public Teacher() {
		super();
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		doPost(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		HttpSession session = req.getSession();
		String email = new String();
		if(session.getAttribute("email") == null) {
			req.getRequestDispatcher("/teacher_login.jsp").forward(req, resp);
			return;
		} else {
			email = session.getAttribute("email").toString();
		}
		ExternalShareLinkDAO shareLinkDAO = new ExternalShareLinkDAO(LiteUtility.PARTNER_REF);
		//get this teacher's assignments
		List<Map<String, String>> assignmentsInfo = new ArrayList<Map<String, String>>();
		List<ExternalShareLink> shareLinks = shareLinkDAO.getExternalShareLinksByUser(email);
		Base32 base32 = new Base32();
		if(shareLinks != null) {
			Iterator<ExternalShareLink> ite = shareLinks.iterator();
			while(ite.hasNext()) {
				ExternalShareLink externalLink = ite.next();
				ShareLink link = ShareLinkController.getShareLinkByRef(externalLink.getExternal_refernce(), LiteUtility.PARTNER_REF);
				Map<String, String> info = new HashMap<String, String>();
				String encodedID = LiteUtility.encodeProblemSetId(link.getProblemSet().getDecodedID());
//				String tmpStudentLink = Constants.CONNECTOR_URL + "assignment/" + externalLink.getNote();
//				String tmpTeacherLink = Constants.CONNECTOR_URL + "report/" + base32.encodeAsString(externalLink.getNote().getBytes());
				String tmpStudentLink = "http://csta14-5.cs.wpi.edu:8080/direct/assignment/" + externalLink.getNote();
				String tmpTeacherLink = "http://csta14-5.cs.wpi.edu:8080/direct/report/" + base32.encodeAsString(externalLink.getNote().getBytes());
				info.put("problem_set_name", link.getProblemSet().getName());
				info.put("problem_set_id", encodedID);
				info.put("student_link", tmpStudentLink);
				info.put("teacher_link", tmpTeacherLink);
				String linkURL = Constants.ASSISSTments_URL + "connector/share/" + externalLink.getExternal_refernce();
				info.put("share_link", linkURL);
				assignmentsInfo.add(info);
			}
			session.setAttribute("assignments", assignmentsInfo);
		}
		
		
		RequestDispatcher dispatcher = req.getRequestDispatcher("/teacher.jsp");
		
		dispatcher.forward(req, resp);
	}
}
